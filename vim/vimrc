" General settings {{{

set nocompatible

if !has('nvim')
  unlet! skip_defaults_vim
  source $VIMRUNTIME/defaults.vim
endif

set wildmenu
if has("patch-8.1.4325")
  set wildoptions=pum
endif
set ruler
set title
set history=500
set lazyredraw
set cursorline

set ignorecase
set smartcase
set hlsearch
set incsearch

set showmatch
set mat=2

" Show tabs and trailing spaces
set list
exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"

set noerrorbells
set novisualbell
set t_vb=
set tm=500

set nobackup
set nowb
set directory=$HOME/.vim/swapfiles//

set ts=8 sw=2 sts=2 et
set smarttab
set ai si

set mouse=a
if &term =~ '^screen' || &term =~ "^tmux"
  " tmux supports extended mouse mode - this fixes mouse drag
  set ttymouse=xterm2
endif

" C-X C-F filename completion should ignore '=' character
" eg. when extending export MYFILE=/bin/bash
set isfname-==

" I like the default completeopt setting, but jedi-vim
" will override it if we don't set it here
set completeopt=menu,preview

" Don't show "match 1 of 2" etc. in |ins-completion-menu|.
set shortmess+=c

" Timeout for leader key
set timeoutlen=2000

set tags=tags;/

" Allow :find to locate files in subdirectories
set path+=**

set backspace=indent,eol,start
set nrformats-=octal

" Use whole "words" when opening URLs.
" This avoids cutting off parameters (after '?') and anchors (after '#').
" See http://vi.stackexchange.com/q/2801/1631
let g:netrw_gx="<cWORD>"

set fillchars=vert:\│

if has("patch-8.1.0360")
  set diffopt=filler,internal,algorithm:histogram,indent-heuristic
endif

if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
endif

" }}}

" File type settings {{{

filetype plugin on
filetype indent on

function! MyJsonFoldText()
    let nl = v:foldend - v:foldstart + 1
    " Concatenate lines
    let concattext = join(getline(v:foldstart, v:foldstart + 2), ' ')
    " Remove first 4 spaces (those will be replaced by '+-- ')
    " so that the indentation lines up nicely
    let linetext1 = substitute(concattext, '^\s\s\s\s', '', '')
    " Replace multiplace spaces with single space
    " (except for the indentation of the first line)
    let linetext2 = substitute(linetext1, '\(\S\)\s\+', '\1 ', 'g')
    let txt = '+-- ' . linetext2 . '... (' . nl . ' lines)'
    return txt
endfunction

au FileType gitcommit setl spell spelllang=en_us
au BufNewFile,BufRead Dockerfile* setf dockerfile
au FileType json setl foldmethod=syntax foldlevel=99 foldtext=MyJsonFoldText()
au FileType vim setl foldmethod=marker
au FileType javascript,html,css setl ts=2 sw=2 sts=2 et
au FileType python setl et sw=4 ts=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
au FileType python setl foldmethod=indent foldlevel=99
au FileType xml let g:xml_syntax_folding=1
au FileType xml setl foldmethod=syntax foldlevel=99 ts=2 sw=2 sts=2
" Unlike colorcolumn, the following will only higlight the 81th character and
" not the whole column
au FileType java,python highlight ColorColumn ctermbg=red
au FileType java call matchadd('ColorColumn', '\%101v', 100)
au FileType python call matchadd('ColorColumn', '\%81v', 100)
au FileType python compiler pyunit
au FileType python set makeprg=python3\ %
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m

" }}}

" Colors, fonts, UI {{{

syntax enable

set t_Co=256
set background=light
let g:gruvbox_italic=1
silent! color PaperColor

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default': {
  \       'allow_bold': 1,
  \       'allow_italic': 1,
  \       'transparent_background': 1
  \     }
  \   }
  \ }

" Set extra options when running in GUI mode
if has('win32')
    set guifont=Consolas:h14   " Win32.
elseif has('gui_macvim')
    set guifont=Monaco:h16     " OSX.
    let macvim_skip_colorscheme = 1
else
    set guifont=Monospace\ 14  " Linux.
endif

if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set guitablabel=%M\ %t
endif

" }}}

" Keyboard mappings {{{

let mapleader = " "
let g:mapleader = " "

nnoremap <leader>tt :setlocal paste!<cr>
nnoremap <leader>tn :setlocal number!<cr>
nnoremap <leader>tr :setlocal rnu!<cr>
nnoremap <leader>tl :setlocal list!<cr>

nnoremap <leader>ev :split $MYVIMRC<cr>

" Format json
nnoremap <leader>jj :%!jq<cr>:set foldmethod=indent<cr>:set syntax=json<cr>

" Shortcuts for 3-way merge
nnoremap <Leader>1 :diffget LOCAL<CR>
nnoremap <Leader>2 :diffget BASE<CR>
nnoremap <Leader>3 :diffget REMOTE<CR>

" Jump to next/previous git conflict marker
nnoremap ]x /^\(<\{7\}\\|>\{7\}\\|=\{7\}\\|\|\{7\}\)\( \\|$\)<cr>
nnoremap [x ?^\(<\{7\}\\|>\{7\}\\|=\{7\}\\|\|\{7\}\)\( \\|$\)<cr>

" Follow tags on Hungarian keyboard
nnoremap <C-ú> <C-]>
" Use Ctrl-A to go to the beginning of the command line instead of Ctrl-B
cnoremap <C-a> <C-b>

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" }}}

" Load extra settings for work {{{

if filereadable(expand('$HOME/.vim/vimrc.local'))
  exe 'source' expand('$HOME/.vim/vimrc.local')
endif

" }}}

" K {{{

runtime ftplugin/man.vim
set keywordprg=:Man
autocmd FileType vim setlocal keywordprg=:help
autocmd FileType python setlocal keywordprg=pydoc

" }}}

" Plugins {{{

" lightline {{{

let g:lightline = {
  \   'active': {
  \     'left':[ [ 'mode', 'paste' ],
  \              [ 'gitgutter', 'fugitive', 'readonly', 'filename', 'modified' ]
  \     ]
  \   },
  \   'component_function': {
  \     'gitgutter': 'MyGitGutter',
  \     'fugitive': 'FugitiveHead'
  \   },
  \   'colorscheme': 'Tomorrow'
  \ }
set noshowmode
set laststatus=2

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" }}}

" vim-gitgutter {{{

set updatetime=200

" }}}

" vimwiki {{{

let g:vimwiki_list = [{'syntax': 'markdown', 'ext': '.md', 'path_html': '~/tmp/vimwiki_html/', 'path': '~/vimwiki', 'custom_wiki2html': '~/vimwiki/wiki2html.sh', 'css_name': 'wiki2html.css', 'auto_diary_index': 1}]
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
let g:markdown_fenced_languages = ['sh', 'html', 'xml', 'sql']
let g:vimwiki_folding = 'expr'
let g:vimwiki_auto_header = 1
autocmd FileType vimwiki setl foldlevel=99 wrap et
nmap <Leader>x <Plug>VimwikiToggleListItem
" Don't let vimwiki remap +, - and Ctrl-I (along with Tab) in normal mode
nmap <Leader>+ <Plug>VimwikiNormalizeLink
vmap <Leader>+ <Plug>VimwikiNormalizeLinkVisual
nmap <Leader>- <Plug>VimwikiRemoveHeaderLevel
nmap <Leader>wn <Plug>VimwikiNextLink

" }}}

" ale {{{

let g:ale_linters = {'python': ['flake8', 'pylint']}
let g:ale_set_loclist = 0  " Don't overwrite the location list (fixes VimWikiSearch)
let g:ale_fixers = {'python': ['remove_trailing_lines', 'trim_whitespace', 'autopep8']}
let g:ale_python_flake8_options = '--ignore=E501'  " ignore 'line too long' errors

" }}}

" fzf {{{

set runtimepath+=/usr/local/opt/fzf,/usr/share/doc/fzf/examples

let $FZF_DEFAULT_OPTS .= ' --inline-info'

if has('popupwin')
  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
endif

nnoremap <C-p> :Files<Cr>
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-t> <plug>(fzf-complete-path)
inoremap <expr> <c-x><c-d> fzf#vim#complete#path('blsd')
imap <c-x><c-l> <plug>(fzf-complete-line)

" An action can be a reference to a function that processes selected lines
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" }}}

" tagbar {{{

nnoremap <F9> :TagbarToggle<CR><C-w>w

" }}}

" coc.nvim {{{

let g:coc_start_at_startup = v:false

" }}}

" }}}

